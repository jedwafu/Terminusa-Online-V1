diff --git a/models.py b/models.py
--- a/models.py
+++ b/models.py
@@ -1,4 +1,14 @@
 from database import db
+
+class Announcement(db.Model):
+    __tablename__ = 'announcements'
+
+    id = db.Column(db.Integer, primary_key=True)
+    title = db.Column(db.String(255), nullable=False)
+    content = db.Column(db.Text, nullable=False)
+    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())
+
+    def __repr__(self):
+        return f'<Announcement {self.title}>'

diff --git a/routes.py b/routes.py
--- a/routes.py
+++ b/routes.py
@@ -1,6 +1,6 @@
 from flask import jsonify, request, render_template, send_from_directory, make_response, redirect
 from app import app, db
-from models import User, PlayerCharacter, Wallet, Item, Inventory
+from models import User, PlayerCharacter, Wallet, Item, Inventory, Announcement
 
 @app.route('/announcements', methods=['GET'])
 def get_announcements():
     announcements = Announcement.query.order_by(Announcement.created_at.desc()).all()
     user = None
     if session.get('user_id'):
         user = User.query.get(session['user_id'])
     return render_template('announcements.html', 
                          announcements=announcements,
                          is_admin=(user.role == 'admin' if user else False))

@app.route('/announcements', methods=['POST'])
@admin_required
def create_announcement():
    data = request.get_json()
    if not data or 'title' not in data or 'content' not in data:
        return jsonify({'message': 'Missing required fields!'}), 400
        
    new_announcement = Announcement(
        title=data['title'],
        content=data['content']
    )
    db.session.add(new_announcement)
    db.session.commit()
    return jsonify({'message': 'Announcement created successfully!'}), 201

@app.route('/announcements/<int:id>', methods=['PUT'])
@admin_required
def update_announcement(id):
    data = request.get_json()
    if not data or 'title' not in data or 'content' not in data:
        return jsonify({'message': 'Missing required fields!'}), 400
        
    announcement = Announcement.query.get(id)
    if not announcement:
        return jsonify({'message': 'Announcement not found!'}), 404
        
    announcement.title = data['title']
    announcement.content = data['content']
    db.session.commit()
    return jsonify({'message': 'Announcement updated successfully!'}), 200

@app.route('/announcements/<int:id>', methods=['DELETE'])
@admin_required
def delete_announcement(id):
    announcement = Announcement.query.get(id)
    if not announcement:
        return jsonify({'message': 'Announcement not found!'}), 404
        
    db.session.delete(announcement)
    db.session.commit()
    return jsonify({'message': 'Announcement deleted successfully!'}), 200

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not session.get('user_id'):
            return jsonify({'message': 'Authentication required!'}), 401
        
        user = User.query.get(session['user_id'])
        if not user or user.role != 'admin':
            return jsonify({'message': 'Admin privileges required!'}), 403
            
        return f(*args, **kwargs)
    return decorated_function
